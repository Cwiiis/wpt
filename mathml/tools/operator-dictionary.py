#!/usr/bin/python

from lxml import etree
from utils.misc import downloadWithProgressBar, UnicodeXMLURL
import json

# Retrieve the unicode.xml file if necessary.
unicodeXML = downloadWithProgressBar(UnicodeXMLURL)

# Extract the mathvariants transformation.
xsltTransform = etree.XSLT(etree.parse("./operator-dictionary.xsl"))

# Put the operator dictionary into a Python structure.
operatorDictionary = {}
root = xsltTransform(etree.parse(unicodeXML)).getroot()

def parseHexaNumber(string):
    return int("0x%s" % string, 16)

def parseHexaSequence(string):
    return tuple(map(parseHexaNumber, string[1:].split("-")))

def parseSpaces(value, entry):
    for name in ["lspace", "rspace"]:
        attributeValue = entry.get(name)
        if attributeValue is not None:
            value[name] = int(attributeValue)

def parseProperties(value, entry):
    attributeValue = entry.get("properties")
    if attributeValue is not None:
        # The fence and separator properties don't have any effect on math
        # layout, so don't add them to the JSON file until we actually need
        # them.
        for name in ["stretchy", "symmetric", "largeop", "movablelimits", "accent"]:
            if attributeValue.find(name) >= 0:
                value[name] = True

for entry in root:
    characters = parseHexaSequence(entry.get("unicode"))
    form = entry.get("form")
    key = ""
    for c in characters:
        key += unichr(c)
    key += " " + form
    value = {
        "characters": characters,
        "form": form
    }
    # There is no dictionary-specified minsize/maxsize values, so no need to parse them.
    parseSpaces(value, entry)
    parseProperties(value, entry)
    operatorDictionary[key] = value

# FIXME: Create appropriate test fonts, etc

# Serialize to JSON.
for key in operatorDictionary:
    del operatorDictionary[key]["characters"]
    del operatorDictionary[key]["form"]
operatorDictionary[""] = "This file was automatically generated by operator-dictionary.py. Do not edit."
with open('../support/operator-dictionary.json', 'w') as fp:
    json.dump(operatorDictionary, fp, sort_keys=True, ensure_ascii=True)
